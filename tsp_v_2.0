import itertools
import requests

towns = ["Nairobi, Kenya", "Nakuru, Kenya", "Nyahururu, Kenya", "Nyeri, Kenya", "Meru, Kenya", "Nandi, Kenya"]

def get_coordinates(town):
    url = "https://nominatim.openstreetmap.org/search"
    params = {
        'q': town,
        'format': 'json',
        'limit': 1
    }
    response = requests.get(url, params=params).json()
    if response:
        return float(response[0]['lat']), float(response[0]['lon'])
    else:
        raise Exception(f"Could not get coordinates for {town}")

coordinates = [get_coordinates(town) for town in towns]

def get_distance_matrix(coordinates):
    base_url = "http://router.project-osrm.org/table/v1/driving/"
    locs = ";".join([f"{lon},{lat}" for lat, lon in coordinates])
    url = f"{base_url}{locs}"
    params = {
        'annotations': 'distance'
    }
    
    response = requests.get(url, params=params).json()
    
    if 'distances' in response:
        return response['distances']
    else:
        raise Exception("Error fetching data from OSRM API")

distance_matrix = get_distance_matrix(coordinates)

def calculate_distance(path, distances):
    total_distance = 0
    for i in range(len(path) - 1):
        total_distance += distances[path[i]][path[i + 1]]
    return total_distance

def shortest_path_with_constraints(distances):
    num_towns = len(distances)
    shortest_distance = float('inf')
    shortest_path = None
    
    #all permutations of the towns excluding Nairobi and Nandi
    towns_to_permute = list(range(1, num_towns - 1))
    all_paths = itertools.permutations(towns_to_permute)
    
    #fix Nairobi at the start and end, and Nandi just before the end
    for perm in all_paths:
        path = (0,) + perm + (num_towns - 1, 0)
        current_distance = calculate_distance(path, distances)
        if current_distance < shortest_distance:
            shortest_distance = current_distance
            shortest_path = path
    
    return shortest_path, shortest_distance

#convert indices to respective town names
def map_indices_to_towns(indices, towns):
    return [towns[i] for i in indices]

shortest_path_indices, shortest_distance = shortest_path_with_constraints(distance_matrix)
shortest_path_towns = map_indices_to_towns(shortest_path_indices, towns)

print(f"The shortest path is: {shortest_path_towns}")
print(f"The shortest distance is: {shortest_distance/1000} KM")

#generate link
def generate_google_maps_link(towns, path):
    base_url = "https://www.google.com/maps/dir/"
    route = "/".join([towns[i].replace(" ", "+") for i in path])
    return base_url + route

#get Google Maps link
google_maps_link = generate_google_maps_link(towns, shortest_path_indices)
print(f"Google Maps link: {google_maps_link}")
